{"version":3,"sources":["config.js","store/action-utils.js","store/contact.model.js","store/contact.api.js","assets/loader.svg","components/Loader.js","App.js","serviceWorker.js","store/contact.actions.js","store/contact.reducer.js","store/contact.saga.js","store/index.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","Api","ApiSeed","ApiResults","SearchFields","OrderByFields","parseList","response","model","list","data","results","models","forEach","item","push","ContactModel","contact","Object","classCallCheck","this","gender","firstname","name","first","charAt","toUpperCase","slice","lastname","last","street","location","city","state","postcode","mapUrl","concat","coordinates","latitude","longitude","email","identifier","login","uuid","phone","cell","picture","large","birthday","moment","dob","date","format","daysUntilBirthday","add","age","fromNow","registered","color","randomColor","seed","loadContactsApi","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","axios","get","sent","abrupt","stop","apply","arguments","module","exports","p","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_assets_loader_svg__WEBPACK_IMPORTED_MODULE_1__","_assets_loader_svg__WEBPACK_IMPORTED_MODULE_1___default","Loader","loading","createElement","className","src","loader","alt","library","faMobileAlt","faPhone","faEnvelope","faAngleRight","faAngleLeft","faTag","faSortAlphaDown","faSortAlphaUp","faMapMarkerAlt","faQuestionCircle","Contacts","withRouter","lazy","Promise","all","e","then","bind","App","react_default","react","fallback","Switch","Redirect","from","exact","to","Route","path","component","Component","Boolean","window","hostname","match","LOAD_CONTACT","LOAD_CONTACT_SUCCESS","LOAD_CONTACT_ERROR","initState","error","loadingContactsAsync","watchLoadingContactsAsync","contactSaga","contacts","call","toConsumableArray","put","type","payload","t0","message","_marked","_context2","takeEvery","_marked2","_context3","fork","_marked3","store","combineReducers","length","undefined","action","objectSpread","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reducers","applyMiddleware","run","ReactDOM","render","es","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.878a1452.chunk.js","sourcesContent":["const Api = 'https://randomuser.me/api/';\r\nconst ApiSeed = 'antonforsberg';\r\nconst ApiResults = 30;\r\nconst SearchFields = [    \r\n    'name',\r\n    'email',\r\n    'phone',\r\n    'cell',\r\n    'city',\r\n    'street'\r\n];\r\n\r\nconst OrderByFields = [\r\n    'name',\r\n    'email',\r\n    'city'\r\n  ]\r\n\r\nexport { Api, ApiSeed, ApiResults, SearchFields, OrderByFields };","export const parseList = (response, model) => {\r\n    let list = response.data.results;\r\n    if (typeof list !== 'object') {\r\n      list = [];\r\n    }\r\n\r\n    if (!model)\r\n        return list;\r\n\r\n    let models = []\r\n\r\n    list.forEach(item => {\r\n        models.push(new model(item))\r\n    });\r\n\r\n    return models;\r\n  };","import * as randomColor from 'randomcolor';\r\nimport * as moment from 'moment';\r\n\r\nexport class ContactModel {\r\n    constructor(contact) {\r\n        if (!contact) {\r\n            return;\r\n        }\r\n\r\n        this.gender = contact.gender;\r\n        this.firstname = contact.name.first.charAt(0).toUpperCase() + contact.name.first.slice(1);\r\n        this.lastname = contact.name.last.charAt(0).toUpperCase() + contact.name.last.slice(1);\r\n        this.name = this.firstname + ' ' + this.lastname;\r\n        this.street = contact.location.street.charAt(0).toUpperCase() + contact.location.street.slice(1);\r\n        this.city = contact.location.city.charAt(0).toUpperCase() + contact.location.city.slice(1);\r\n        this.state = contact.location.state.charAt(0).toUpperCase() + contact.location.state.slice(1);\r\n        this.postcode = contact.location.postcode;\r\n        this.mapUrl = `https://maps.google.com/?q=${contact.location.coordinates.latitude},${contact.location.coordinates.longitude}`;\r\n        this.email = contact.email;\r\n        this.identifier = contact.login.uuid;\r\n        this.phone = contact.phone;\r\n        this.cell = contact.cell;\r\n        this.picture = contact.picture.large;\r\n        this.birthday = moment(contact.dob.date).format('MMMM D');\r\n        this.daysUntilBirthday = moment(contact.dob.date).add(contact.dob.age + 1, 'years').fromNow();\r\n        this.registered = moment(contact.registered.date).format('YYYY-MM-DD');\r\n        this.color = randomColor({ seed: this.identifier });\r\n    }\r\n}","import axios from 'axios';\r\nimport { Api, ApiResults, ApiSeed } from '../config';\r\nimport { parseList } from './action-utils';\r\nimport { ContactModel } from './contact.model';\r\n\r\nexport const loadContactsApi = async () => {\r\n    const response = await axios.get(`${Api}?seed=${ApiSeed}&results=${ApiResults}&noinfo&nat=dk`);\r\n    return parseList(response, ContactModel);\r\n}","module.exports = __webpack_public_path__ + \"static/media/loader.ec228ef4.svg\";","import React from 'react'\r\nimport loader from '../assets/loader.svg';\r\n\r\nconst Loader = ({ loading }) => {\r\n    return (\r\n        <div className={'full-page-loader ' + (!loading && 'hidden')}>\r\n            <img src={loader} alt=\"loader\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import React, { Component, lazy, Suspense } from 'react';\nimport { Route, Redirect, withRouter, Switch } from 'react-router-dom';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faMobileAlt, faPhone, faEnvelope, faAngleRight, faAngleLeft,\n  faTag, faSortAlphaDown, faSortAlphaUp, faMapMarkerAlt, faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\nimport './styles.scss';\nimport Loader from './components/Loader';\n\nlibrary.add(faMobileAlt, faPhone, faEnvelope, faAngleRight, faAngleLeft,\n  faTag, faSortAlphaDown, faSortAlphaUp, faMapMarkerAlt, faQuestionCircle);\n\nconst Contacts = withRouter(\n  lazy(() => import('./contacts/Contacts'))\n);\n\nclass App extends Component {\n  render() {\n    return (\n      <section className=\"content\">\n        <Suspense fallback={<div></div>}>\n          <Switch>\n            <Redirect from=\"/\" exact to=\"/contacts\" />\n            <Route path='/contacts' component={Contacts}></Route>\n          </Switch>\n        </Suspense>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const LOAD_CONTACT = '[Contacts] LOAD_CONTACT';\r\nexport const LOAD_CONTACT_SUCCESS = '[Contacts] LOAD_CONTACT_SUCCESS';\r\nexport const LOAD_CONTACT_ERROR = '[Contacts] LOAD_CONTACT_ERROR';\r\nexport const SEARCH_CONTACT = '[Contacts] SEARCH_CONTACT';\r\nexport const ORDER_CONTACT = '[Contacts] ORDER_CONTACT';\r\n\r\nexport const loadContactsAction = () => {\r\n    return { type: LOAD_CONTACT }\r\n};","import {\r\n    LOAD_CONTACT,\r\n    LOAD_CONTACT_SUCCESS,\r\n    LOAD_CONTACT_ERROR,\r\n} from './contact.actions'\r\n\r\nlet initState = {\r\n    loading: false,\r\n    data: [],\r\n    error: void 0\r\n}\r\n\r\nexport const contactsReducer = (state = initState, action) => {\r\n    switch(action.type) {\r\n        case LOAD_CONTACT:\r\n            return { ...state, loading: true, error: '' };\r\n        case LOAD_CONTACT_SUCCESS:\r\n            return { ...state, loading: false, data: [...action.payload] };\r\n        case LOAD_CONTACT_ERROR:\r\n            return { ...state, loading: false, error: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { put, takeEvery, call, fork } from 'redux-saga/effects';\r\n\r\nimport {\r\n    LOAD_CONTACT,\r\n    LOAD_CONTACT_SUCCESS,\r\n    LOAD_CONTACT_ERROR\r\n} from './contact.actions'\r\n\r\nimport { loadContactsApi } from './contact.api';\r\n\r\nexport function* loadingContactsAsync() {\r\n    try {\r\n      const data = yield call(loadContactsApi);\r\n      const contacts = [...data];\r\n  \r\n      yield put({ type: LOAD_CONTACT_SUCCESS, payload: contacts });\r\n    } catch (err) {\r\n      yield put({ type: LOAD_CONTACT_ERROR, payload: err.message });\r\n    }\r\n  }\r\n\r\n  export function* watchLoadingContactsAsync() {\r\n    yield takeEvery(LOAD_CONTACT, loadingContactsAsync);\r\n  }\r\n\r\n  export function* contactSaga() {\r\n    yield fork(watchLoadingContactsAsync);\r\n  }","import { combineReducers } from 'redux';\r\nimport { contactsReducer } from './contact.reducer';\r\n\r\nexport * from './contact.reducer';\r\nexport * from './contact.actions';\r\nexport * from './contact.saga';\r\n\r\nconst store = combineReducers({\r\n    contacts: contactsReducer\r\n});\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport createSagaMiddleware from 'redux-saga';\nimport reducers, { contactSaga } from './store';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n    reducers,\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(contactSaga);\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}